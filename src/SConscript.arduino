#!/usr/bin/python

# scons script for the Arduino sketch
# http://code.google.com/p/arscons/
#
# Copyright (C) 2010 by Homin Lee <ff4500@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# You'll need the serial module: http://pypi.python.org/pypi/pyserial

# Basic Usage:
# 1. make a folder which have same name of the sketch (ex. Blink/ for Blik.pde)
# 2. put the sketch and SConstruct(this file) under the folder.
# 3. to make the HEX. do following in the folder.
#     $ scons
# 4. to upload the binary, do following in the folder.
#     $ scons upload

# Thanks to:
# * Ovidiu Predescu <ovidiu@gmail.com> and Lee Pike <leepike@gmail.com>
#     for Mac port and bugfix.
#
# This script tries to determine the port to which you have an Arduino
# attached. If multiple USB serial devices are attached to your
# computer, you'll need to explicitly specify the port to use, like
# this:
#
# $ scons ARDUINO_PORT=/dev/ttyUSB0
#
# To add your own directory containing user libraries, pass EXTRA_LIB
# to scons, like this:
#
# $ scons EXTRA_LIB=<my-extra-library-dir>
#
from glob import glob
from path import path
import sys
import re
import os
from itertools import chain

from find_avrdude import get_arduino_paths
from git_util import GitUtil

Import('SOFTWARE_VERSION')
Import('HARDWARE_MAJOR_VERSION')
Import('HARDWARE_MINOR_VERSION')


pathJoin = os.path.join

env = Environment()
platform = env['PLATFORM']


def getUsbTty(rx):
    usb_ttys = glob(rx)
    if len(usb_ttys) == 1: return usb_ttys[0]
    else: return None


class ArduinoBuildContext(object):
    def __init__(self):
        AVR_BIN_PREFIX = None
        AVRDUDE_PREFIX = None
        ARDUINO_HOME, AVRDUDE_BIN, AVRDUDE_CONF = get_arduino_paths()
        print 'found arduino path:', ARDUINO_HOME
        print 'using newest avrdude:', AVRDUDE_BIN
        print 'using avrdude config:', AVRDUDE_CONF
        self.AVRDUDE_BIN = AVRDUDE_BIN
        self.AVRDUDE_CONF = AVRDUDE_CONF

        if platform == 'darwin':
            # For MacOS X, pick up the AVR tools from within Arduino.app
            ARDUINO_HOME_DEFAULT = '/Applications/Arduino.app/Contents/Resources/Java'
            ARDUINO_HOME    = ARGUMENTS.get('ARDUINO_HOME', ARDUINO_HOME_DEFAULT)
            ARDUINO_PORT_DEFAULT = getUsbTty('/dev/tty.usbserial*')
        elif platform == 'win32':
            # For Windows, use environment variables.
            #ARDUINO_PORT_DEFAULT = os.environ.get('ARDUINO_PORT')
            ARDUINO_PORT_DEFAULT = 'COM3'
        else:
            # For Ubuntu Linux (9.10 or higher)
            ARDUINO_PORT_DEFAULT = getUsbTty('/dev/ttyUSB*')
            AVR_BIN_PREFIX = 'avr-'
            AVRDUDE_PREFIX = path(ARDUINO_HOME) / path('hardware/tools/')

        ARDUINO_BOARD_DEFAULT = os.environ.get('ARDUINO_BOARD', 'mega2560')

        ARDUINO_PORT    = ARGUMENTS.get('ARDUINO_PORT', ARDUINO_PORT_DEFAULT)
        self.ARDUINO_PORT = ARDUINO_PORT
        ARDUINO_BOARD   = ARGUMENTS.get('ARDUINO_BOARD', ARDUINO_BOARD_DEFAULT)
        self.ARDUINO_BOARD = ARDUINO_BOARD
        ARDUINO_VER     = ARGUMENTS.get('ARDUINO_VER', 22) # Arduino 0022
        #RST_TRIGGER     = ARGUMENTS.get('RST_TRIGGER', 'stty hupcl -F ') # use built-in pulseDTR() by default
        RST_TRIGGER     = ARGUMENTS.get('RST_TRIGGER', None) # use built-in pulseDTR() by default
        EXTRA_LIB       = ARGUMENTS.get('EXTRA_LIB', None) # handy for adding another arduino-lib dir

        print 'ARDUINO_PORT:', ARDUINO_PORT

        if not ARDUINO_HOME:
            print 'ARDUINO_HOME must be defined.'
            raise KeyError('ARDUINO_HOME')

        ARDUINO_CORE = pathJoin(ARDUINO_HOME, 'hardware/arduino/cores/arduino')
        self.ARDUINO_VER = ARDUINO_VER
        self.ARDUINO_CORE = ARDUINO_CORE
        ARDUINO_SKEL = pathJoin(ARDUINO_CORE, 'main.cpp')
        self.ARDUINO_SKEL = ARDUINO_SKEL
        ARDUINO_CONF = pathJoin(ARDUINO_HOME, 'hardware/arduino/boards.txt')

        # Some OSs need bundle with IDE tool-chain
        if platform == 'darwin' or platform == 'win32': 
            AVR_BIN_PREFIX = pathJoin(ARDUINO_HOME, 'hardware/tools/avr/bin', 'avr-')

        ARDUINO_LIBS = []
        if EXTRA_LIB != None:
            ARDUINO_LIBS += [EXTRA_LIB]
        ARDUINO_LIBS += [pathJoin(ARDUINO_HOME, 'libraries'), ]
        self.ARDUINO_LIBS = ARDUINO_LIBS

        # check given board name, ARDUINO_BOARD is valid one
        cre_board_name = re.compile(r'^(.*)\.name=(.*)')
        boards = {}

        ARDUINO_CONFIG = path(ARDUINO_CONF).lines()
        for line in ARDUINO_CONFIG:
            result = cre_board_name.findall(line)
            if result:
                boards[result[0][0]] = result[0][1]
        self.ARDUINO_CONFIG = ARDUINO_CONFIG

        if not ARDUINO_BOARD in boards.keys():
            print ("ERROR! the given board name, %s is not in the supported board list:" % context.ARDUINO_BOARD)
            print ("all available board names are:")
            for name in sorted(boards.keys()):
                print ("\t%s for %s"%(name.ljust(14), boards[name]))
            print ("however, you may edit %s to add a new board." % context.ARDUINO_CONF)
            sys.exit(-1)

        MCU = self.get_board_conf(r'^%s\.build\.mcu=(.*)' % ARDUINO_BOARD)
        F_CPU = self.get_board_conf(r'^%s\.build\.f_cpu=(.*)' % ARDUINO_BOARD)
        self.MCU = MCU
        self.F_CPU = F_CPU

        # Verify that there is a file with the same name as the folder and with
        # the extension .pde
        TARGET = path(os.getcwd()).name
        print os.getcwd()
        pde_path = path(TARGET + '.pde')
        try:
            assert(os.path.exists(pde_path))
        except AssertionError:
            pde_files = path('.').files('*.pde')
            if not len(pde_files) == 1:
                # If there is not exactly one 'pde' file, fail.
                raise
            TARGET = pde_files[0].namebase
            pde_path = path(TARGET + '.pde')
        self.TARGET = TARGET
        self.pde_path = pde_path

        self.AVR_BIN_PREFIX = AVR_BIN_PREFIX

    def get_board_conf(self, pattern_string):
        cre_board_config = re.compile(pattern_string)
        for line in self.ARDUINO_CONFIG:
            result = cre_board_config.findall(line)
            if result:
                return result[0]
        assert(False)

    def get_env(self):
        cFlags = ['-ffunction-sections', '-fdata-sections', '-fno-exceptions',
                '-funsigned-char', '-funsigned-bitfields', '-fpack-struct',
                        '-fshort-enums', '-Os', '-mmcu=%s' % self.MCU]
        envArduino = Environment(CC='"%s"' % (self.AVR_BIN_PREFIX + 'gcc'),
                CXX='"%s"' % (self.AVR_BIN_PREFIX + 'g++'),
                CPPPATH=['build/core'], CPPDEFINES={'F_CPU': self.F_CPU,
                        'ARDUINO': self.ARDUINO_VER, 'AVR': None,
                        '___SOFTWARE_VERSION___': '\\"%s\\"' % SOFTWARE_VERSION,
                        '___HARDWARE_MAJOR_VERSION___': HARDWARE_MAJOR_VERSION,
                        '___HARDWARE_MINOR_VERSION___': HARDWARE_MINOR_VERSION},
                CFLAGS=cFlags + ['-std=gnu99'], CCFLAGS=cFlags,
                TOOLS=['gcc','g++'])
        return envArduino

    def get_processing_builder(self):
        def fnProcessing(target, source, env):
            wp = open('%s' % target[0], 'wb')
            wp.write(open(self.ARDUINO_SKEL).read())
            # Add this preprocessor directive to localize the errors.
            sourcePath = str(source[0]).replace('\\', '\\\\');
            wp.write('#line 1 "%s"\r\n' % sourcePath)
            wp.write(open('%s' % source[0]).read())
            wp.close()
            return None
        return Builder(action=fnProcessing, suffix='.cpp', src_suffix='.pde')

    def get_elf_builder(self):
        return Builder(action='"%s"' % (self.AVR_BIN_PREFIX + 'gcc') + \
                ' -mmcu=%s -Os -Wl,--gc-sections -o $TARGET $SOURCES -lm' % (
                        self.MCU))

    def get_hex_builder(self):
        return Builder(action='"%s"' % (self.AVR_BIN_PREFIX + 'objcopy') +\
                ' -O ihex -R .eeprom $SOURCES $TARGET')


context = ArduinoBuildContext()

envArduino = context.get_env()

# Add Arduino Processing, Elf, and Hex builders to environment
for builder_name in ['Processing', 'Elf', 'Hex']:
    envArduino.Append(BUILDERS={builder_name: getattr(context,
            'get_%s_builder' % builder_name.lower())()})


def gatherSources(source_root):
    return glob(pathJoin(source_root, '*.c')) +\
            glob(pathJoin(source_root, '*.cpp'))+\
                    glob(pathJoin(source_root, '*.S'))


# Generate list of Arduino core source files
core_sources = gatherSources(context.ARDUINO_CORE)
core_sources = [x for x in core_sources
        if not (os.path.basename(x) == 'main.cpp')]
core_sources = [x.replace(context.ARDUINO_CORE, 'build/core/')
        for x in core_sources]

VariantDir('build/core', context.ARDUINO_CORE)

def get_lib_candidate_list(pde_path, arduino_version):
    '''
    Scan the .pde file to generate a list of included libraries.
    '''
    # Generate list of library headers included in .pde file
    libCandidates = []
    ptnLib = re.compile(r'^[ ]*#[ ]*include [<"](.*)\.h[>"]')
    for line in open(pde_path):
        result = ptnLib.findall(line)
        if result:
            libCandidates += result

    # Hack. In version 20 of the Arduino IDE, the Ethernet library depends
    # implicitly on the SPI library.
    if arduino_version >= 20 and 'Ethernet' in libCandidates:
        libCandidates += ['SPI']
    return libCandidates


def get_lib_sources(libCandidates, arduino_libs):
    '''
    Add VariantDir references for all libraries in libCandidates to the
    corresponding paths in arduino_libs.
    
    Return the combined list of source files for all libraries, relative
    to the respective VariantDir.
    '''
    all_libs_sources = []
    all_lib_names = set()
    index = 0
    for orig_lib_dir in arduino_libs:
        lib_sources = []
        lib_dir = 'build/lib_%02d' % index
        VariantDir(lib_dir, orig_lib_dir)
        for libPath in path(orig_lib_dir).dirs():
            libName = libPath.name
            if not libName in libCandidates:
                # This library is not included in the .pde file, so skip it
                continue
            elif libName in all_lib_names:
                # This library has already been processed, so skip it
                continue
            all_lib_names.add(libName)
            envArduino.Append(CPPPATH=libPath.replace(orig_lib_dir, lib_dir))
            lib_sources = gatherSources(libPath)
            utilDir = pathJoin(libPath, 'utility')
            if os.path.exists(utilDir) and os.path.isdir(utilDir):
                lib_sources += gatherSources(utilDir)
                envArduino.Append(CPPPATH=utilDir.replace(orig_lib_dir, lib_dir))
            lib_sources = [x.replace(orig_lib_dir, lib_dir) for x in lib_sources]
            all_libs_sources += lib_sources
        index += 1
    return all_libs_sources


hex_root = path('build').joinpath('hex')
VariantDir(hex_root, '.')
hex_path = hex_root.joinpath(context.TARGET + '.hex')

# Convert sketch(.pde) to cpp
envArduino.Processing(hex_root.joinpath(context.TARGET+'.cpp'),
        hex_root.joinpath(context.pde_path))

sources = [hex_root.joinpath(context.TARGET+'.cpp')]
sources += get_lib_sources(get_lib_candidate_list(context.pde_path,
        context.ARDUINO_VER), context.ARDUINO_LIBS)
sources += core_sources
hybrid_sources = re.split(r'\s+', 'dmf_control_board.cpp RemoteObject.cpp')
print hybrid_sources
sources += [hex_root.joinpath(s) for s in hybrid_sources]
# Add raw sources which live in sketch dir.
# sources += gatherSources('.')

# Finally Build!!
objs = envArduino.Object(sources) #, LIBS=libs, LIBPATH='.')
#objs_1 = envArduino.Object(sources, CPPDEFINES={'___HARDWARE_MINOR_VERSION___': 1})
envArduino.Elf(context.TARGET+'.elf', objs)
arduino_hex = envArduino.Hex(hex_path,
        hex_root.joinpath(context.TARGET+'.elf'))
Export('arduino_hex')

# Print Size
# TODO: check binary size
#MAX_SIZE = context.get_board_conf(
        #r'^%s\.upload.maximum_size=(.*)' % ARDUINO_BOARD)
#print ("maximum size for hex file: %s bytes" % MAX_SIZE)
envArduino.Command(None, hex_path, '"%s"' % (context.AVR_BIN_PREFIX + 'size'
        ) + ' --target=ihex $SOURCE')

# Upload
UPLOAD_PROTOCOL = context.get_board_conf(r'^%s\.upload\.protocol=(.*)' % (
        context.ARDUINO_BOARD))
UPLOAD_SPEED = context.get_board_conf(r'^%s\.upload\.speed=(.*)' % (
        context.ARDUINO_BOARD))

avrdudeOpts = ['-V', '-F', '-c %s' % UPLOAD_PROTOCOL, '-b %s' % UPLOAD_SPEED,
    '-p %s' % context.MCU, '-P %s' % context.ARDUINO_PORT, '-U flash:w:$SOURCES']
if context.AVRDUDE_CONF:
    avrdudeOpts += ['-C "%s"' % context.AVRDUDE_CONF]

fuse_cmd = '"%s" %s'%(context.AVRDUDE_BIN, ' '.join(avrdudeOpts))

#upload = envArduino.Alias('upload', TARGET+'.hex', [reset_cmd, fuse_cmd]);
upload = envArduino.Alias('upload', hex_path, [fuse_cmd]);
AlwaysBuild(upload)

# Clean build directory
envArduino.Clean('all', 'build/')

# vim: et sw=4 fenc=utf-8:
